<?xml version="1.0" encoding="UTF-8"?>
<Worksheet>
<Version major="2016" minor="2"/>
<Label-Scheme value="2" prefix=""/>
<View-Properties presentation="false" autoexpanding_sections="true" UserProfileName="Maple Default Profile" NumericFormat-ApplyInteger="true" NumericFormat-ApplyRational="true" NumericFormat-ApplyExponent="false">
</View-Properties>
<MapleNet-Properties prettyprint="3" warnlevel="3" preplot="" helpbrowser="standard" contextmenusize="automatic" displayprecision="-1" echo="1" unitattributes="&quot;fontweight&quot; = &quot;bold&quot;" imaginaryunit="I" longdelim="true" elisiontermsthreshold="10000" elisiondigitsafter="100" elisiondigitsbefore="100" plotdevice="inline" errorbreak="1" plotoptions="" plotdriver="opengl" quiet="false" elisiontermsbefore="100" elisiontermsafter="100" screenwidth="79" indentamount="4" plotoutput="terminal" screenpixelheight="900" rtablesize="10" useclientjvm="true" labelwidth="20" postplot="" typesetting="standard" ansi="false" elisiondigitsthreshold="10000" showassumed="1" errorcursor="false" labelling="true" screenheight="25" prompt="&gt; " verboseproc="1" latexwidth="8.0" ShowLabels="true"/>
<Styles>
<Font name="Heading 1" background="[255,255,255]" bold="true" executable="false" family="Serif" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Warning" background="[255,255,255]" bold="false" executable="false" family="Monospaced" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Output" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 4" background="[255,255,255]" bold="false" executable="false" family="Serif" foreground="[0,0,0]" italic="true" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Line Printed Output" background="[255,255,255]" bold="false" executable="false" family="Monospaced" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 2" background="[255,255,255]" bold="true" executable="false" family="Serif" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="16" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Output" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Inert Output" background="[255,255,255]" bold="false" executable="true" family="Times New Roman" foreground="[144,144,144]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 3" background="[255,255,255]" bold="true" executable="false" family="Serif" foreground="[0,0,0]" italic="true" opaque="false" readonly="false" size="14" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Diagnostic" background="[255,255,255]" bold="false" executable="false" family="Monospaced" foreground="[40,120,40]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 1" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Input" background="[255,255,255]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Text Output" background="[255,255,255]" bold="false" executable="false" family="Monospaced" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 2" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 3" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 4" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 5" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Annotation Title" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Header and Footer" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="10" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="HyperlinkError" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[255,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Atomic Variable" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[175,0,175]" italic="true" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="HyperlinkWarning" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Dictionary Hyperlink" background="[255,255,255]" bold="false" executable="false" family="Serif" foreground="[147,0,15]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="2D Math" background="[255,255,255]" bold="false" executable="true" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Bullet Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Plot" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Annotation Text" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="List Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Dash Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Input" background="[255,255,255]" bold="false" executable="true" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Error" background="[255,255,255]" bold="false" executable="false" family="Monospaced" foreground="[255,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Title" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Text" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Normal" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Caption Reference" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Code" background="[255,255,255]" bold="false" executable="false" family="Monospaced" foreground="[255,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Input Placeholder" background="[255,255,255]" bold="true" executable="true" family="Monospaced" foreground="[200,0,200]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="true"/>
<Font name="Equation Label" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Author" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Hyperlink" background="[255,255,255]" bold="false" executable="false" family="Serif" foreground="[0,128,128]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Caption Text" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Layout name="Heading 1" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="4" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Warning" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 4" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Line Printed Output" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="any" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 2" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="2" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Maple Output" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.3" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 3" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Diagnostic" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="any" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Ordered List 1" alignment="left" bullet="numeric" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Text Output" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="newline" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Ordered List 2" alignment="left" bullet="alphabetic" firstindent="0" leftmargin="36" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 3" alignment="left" bullet="roman" firstindent="0" leftmargin="72" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 4" alignment="left" bullet="ALPHABETIC" firstindent="0" leftmargin="108" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 5" alignment="left" bullet="ROMAN" firstindent="0" leftmargin="144" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Annotation Title" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="12" spacebelow="12" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="HyperlinkError" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="HyperlinkWarning" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Bullet Item" alignment="left" bullet="dot" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Maple Plot" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="List Item" alignment="left" bullet="indent" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Dash Item" alignment="left" bullet="dash" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Error" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Title" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="12" spacebelow="12" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Normal" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Author" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="8" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Pencil-style name="Pencil 1" pen-color="[0,0,0]" pen-height="1.0" pen-width="1.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 2" pen-color="[0,0,255]" pen-height="1.0" pen-width="1.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 3" pen-color="[0,0,0]" pen-height="3.0" pen-width="3.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 4" pen-color="[0,0,255]" pen-height="3.0" pen-width="3.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 5" pen-color="[255,0,0]" pen-height="5.0" pen-width="5.0" pen-opacity="1.0"/>
<Highlighter-style name="Highlighter 5" pen-color="[255,255,0]" pen-height="48.0" pen-width="48.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 3" pen-color="[51,255,0]" pen-height="24.0" pen-width="24.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 4" pen-color="[0,255,255]" pen-height="32.0" pen-width="32.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 1" pen-color="[255,153,255]" pen-height="12.0" pen-width="8.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 2" pen-color="[255,204,0]" pen-height="14.0" pen-width="14.0" pen-opacity="0.8"/>
</Styles>
<Startup-Code startupcode=""/>
<Task-table>
    <Task-category name="&lt;default&gt;"/>
</Task-table>
<Task/>
<Group labelreference="L216" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">##############################################################
###
###   $Id: bssn_emda_rhs.mw Mar.16.2017  $
###
###   History.  This file is a modified version of the original
###   bssn_emtest_rhs.mw. It contains the evolution equations 
###   for the BSSN formulation, the EM equations, the Dilaton
###   equations, and the Axion equations, all conviniently 
###   written to describe
###
###                   DILATON-AXION GRAVITY     
###
##############################################################
</Font></Text-field>
</Input>
</Group>
<Group labelreference="L1" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">restart: with(codegen)[fortran]: with(linalg):</Font></Text-field>
</Input>
</Group>
<Group labelreference="L2" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">Digits := 16:
</Font></Text-field>
</Input>
</Group>
<Group labelreference="L215" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">half := 0.5:
one := 1.0:
two  := 2.0:
threehalves := 3.0/2.0:
twothirds := 2.0/3.0:
third := 1.0/3.0:
fourth := 1.0/4.0:
threefourths := 3.0/4.0:
six := 6.0:
twelve := 12.0:
four := 4.0:
three := 3.0:
sixth := 1.0/6.0:
eighth := 1.0/8.0:
</Font></Text-field>
</Input>
</Group>
<Group hide-output="false" labelreference="L3" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">## Define the fundamental, evolved BSSN variables ##
gtd := array(1..3,1..3): 
Atd := array(1..3,1..3): 

Gamt  := array(1..3): 
Betau := array(1..3): 
Bu    := array(1..3):
## Define matter variables ##
## -- note that the stress tensor that is assumed to come in has a 4D form and is in &quot;up&quot; form -- ## 
Tu       := array(0..3,0..3):

pTtd_ADM := array(1..3,1..3):
Jtd_ADM  := array(1..3):

#---EWH (begin)---#
#Ju_ADM   := array(1..3): 
#---EWH (end)---#

## Define the RHS of the evolution equations ##
gtd_rhs := array(1..3,1..3):
Atd_rhs := array(1..3,1..3):

Gamt_rhs  := array(1..3):
Betau_rhs := array(1..3):
Bu_rhs    := array(1..3):

## Define the RHS for the evolution equations for the advective parts ##
gtd_rhs_xxx := array(1..3,1..3):
Atd_rhs_xxx := array(1..3,1..3):

Gamt_rhs_xxx  := array(1..3):
Betau_rhs_xxx := array(1..3):
Bu_rhs_xxx    := array(1..3):

## Define first derivatives ##
d_trK   := array(1..3) : 
d_chi   := array(1..3) :
d_Alpha := array(1..3) : 

d_Betau := array(1..3,1..3) :
d_Gamt  := array(1..3,1..3) :

d_gtd   := array(1..3,1..3,1..3) :
d_Atd   := array(1..3,1..3,1..3) :


## Define second derivatives ##
dd_chi   := array(1..3,1..3) :
dd_Alpha := array(1..3,1..3) :
dd_Betau := array(1..3,1..3,1..3) :
dd_gtd   := array(1..3,1..3,1..3,1..3) :

d_div_Beta := array(1..3) :


## Define advective derivatives ##
adv_d_gtd  := array(1..3,1..3,1..3) :
adv_d_Atd  := array(1..3,1..3,1..3) :

adv_d_Gamt  := array(1..3,1..3) :
adv_d_Betau := array(1..3,1..3) :
adv_d_Bu    := array(1..3,1..3) :

adv_d_trK  := array(1..3) :
adv_d_chi  := array(1..3) :

adv_d_Alpha := array(1..3) :


## Define some auxiliary quantities ## 
gtu      := array(1..3,1..3):

Atu      := array(1..3,1..3): 
Atud     := array(1..3,1..3):

CalGamt  := array(1..3):

## these are NOT Christoffels; they lack the factor of a half!
Ctd      := array(1..3,1..3,1..3) :  
Ct       := array(1..3,1..3,1..3) :

Rpd      := array(1..3,1..3):
Rtd      := array(1..3,1..3):
Rpd_1    := array(1..3,1..3):

Psi1     := array(1..3,1..3):
Psi1TF   := array(1..3,1..3): 


## Impose symmetry on symmetric quantities ## 
for i from   1 to 3 do 
for j from i+1 to 3 do 

  gtd[j,i] := gtd[i,j] ; 
  gtu[j,i] := gtu[i,j] ; 
  Atd[j,i] := Atd[i,j] ; 
  Atu[j,i] := Atu[i,j] ; 
  Rtd[j,i] := Rtd[i,j] ; 
  Rpd[j,i] := Rpd[i,j] ; 
  Rpd_1[j,i] := Rpd_1[i,j] ; 

  Psi1  [j,i] := Psi1  [i,j] ;
  Psi1TF[j,i] := Psi1TF[i,j] ;

  pTtd_ADM[j,i] := pTtd_ADM[i,j] ; 
  
  dd_chi  [j,i] := dd_chi  [i,j] ; 
  dd_Alpha[j,i] := dd_Alpha[i,j] ; 
  
  gtd_rhs[j,i] := gtd_rhs[i,j] ; 
  Atd_rhs[j,i] := Atd_rhs[i,j] ; 
  
  gtd_rhs_xxx[j,i] := gtd_rhs_xxx[i,j] ; 
  Atd_rhs_xxx[j,i] := Atd_rhs_xxx[i,j] ; 

od; 
od; 


#---EWH (begin)---#
#for i from 0 to 3 do 
#for j from i+1 to 3 do 
#  Tu[j,i] := Tu[i,j] ;
#od:
#od: 
#---EWH (end)-----# 


for i from   1 to 3 do 
for j from   1 to 3 do 
for k from j+1 to 3 do 

  d_gtd[i,k,j] := d_gtd[i,j,k] ; 
  d_Atd[i,k,j] := d_Atd[i,j,k] ; 
    Ctd[i,k,j] :=   Ctd[i,j,k] ; 
    Ct [i,k,j] :=   Ct [i,j,k] ; 

  dd_Betau[k,j,i] := dd_Betau[j,k,i] ; 

  adv_d_gtd[i,k,j] := adv_d_gtd[i,j,k] ; 
  adv_d_Atd[i,k,j] := adv_d_Atd[i,j,k] ; 

od;
od; 
od; 



for i from   1 to 3 do 
for j from   i to 3 do 
for k from   1 to 3 do 
for m from k+1 to 3 do 
  dd_gtd[i,j,m,k] := dd_gtd[i,j,k,m] ; 
od;
od;
od;
od;

for i from   1 to 3 do 
for j from i+1 to 3 do 
for k from   1 to 3 do 
for m from   k to 3 do 
  dd_gtd[j,i,k,m] := dd_gtd[i,j,k,m] ; 
od;
od;
od;
od;

for i from   1 to 3 do 
for j from i+1 to 3 do 
for k from   1 to 3 do 
for m from k+1 to 3 do 
  dd_gtd[j,i,m,k] := dd_gtd[i,j,k,m] ; 
od;
od;
od;
od;

##########################################################
## Computing Stress-Energy Tensor for the scalar field
##########################################################

inv_chi_ := 1.0 / ( abs(chi) ) :
fortran([inv_chi=inv_chi_],optimized,precision=double,filename=`bssn.h`):
fortran([inv_chi=inv_chi_],optimized,precision=double,filename=`bssn_emtest.h`):
fortran([inv_chi=inv_chi_],optimized,precision=double,filename=`psi4.h`):
fortran([inv_chi=inv_chi_],optimized,precision=double,filename=`constraints.h`):

detgtd_  := det(gtd) :
gtd_adj  := adj(gtd) :
idetgtd_ := 1.0 / detgtd :

fortran([detgtd=detgtd_, idetgtd=idetgtd_],optimized,precision=double,filename=`bssn.h`) :
fortran([detgtd=detgtd_, idetgtd=idetgtd_],optimized,precision=double,filename=`bssn_emtest.h`) :
fortran([detgtd=detgtd_, idetgtd=idetgtd_],optimized,precision=double,filename=`psi4.h`) :
fortran([detgtd=detgtd_, idetgtd=idetgtd_],optimized,precision=double,filename=`constraints.h`):

for i from 1 to 3 do 
for j from i to 3 do 
  gtu[i,j] := idetgtd * gtd_adj[i,j] ;
od;
od;

fortran(gtu,optimized,precision=double,filename=`bssn.h`):
fortran(gtu,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(gtu,optimized,precision=double,filename=`psi4.h`):
fortran(gtu,optimized,precision=double,filename=`constraints.h`):
unassign('gtu');
gtu := array(1..3,1..3):
for i from   1 to 3 do 
for j from i+1 to 3 do 
  gtu[j,i] := gtu[i,j] :
od:
od:


# define the derivatives of the SF, the Real part will correspond
# to the dilaton scalar field (varphi in Carlos' notes)
d_phiR := array(1..3): #Real part -&gt; Dilaton
d_phiI := array(1..3): #Img part -&gt; Axion 
d_piR := array(1..3): # - n^a nabla_a phiR -&gt; related with dilaton
d_piI := array(1..3): # - n^a nabla_a phiI -&gt; related with axion


# the 4-metric and its inverse
g4d := array(0..3,0..3):
g4u := array(0..3,0..3):


#---EWH (begin)---#
#for i from   0 to 3 do 
#for j from i+1 to 3 do 
#  g4d[j,i] := g4d[i,j] :
#  g4u[j,i] := g4u[i,j] :
#od:
#od:
#---EWH (end)-----#

g4d[0,0] := -Alpha^2 + inv_chi_*add(add(gtd[i,j]*Betau[i]*Betau[j],i=1..3),j=1..3):
#---EWH (begin)---#
#g4d[0,0] := -Alpha^2 + inv_chi_*( add( gtd[i,i]*Betau[i]*Betau[i], i=1..3) + two*add(add( gtd[i,j]*Betau[i]*Betau[j], j=i+1..3), i=1..2)):
#---EWH (end)-----#
g4u[0,0] := -1/Alpha^2:
for i from 1 to 3 do
  g4d[0,i] := inv_chi_*add(gtd[i,j]*Betau[j],j=1..3);
  g4u[0,i] := (1/Alpha^2)*Betau[i];
  g4d[i,0] := g4d[0,i]:
  g4u[i,0] := g4u[0,i]:
od:
for i from 1 to 3 do
for j from i to 3 do
  g4d[i,j] := inv_chi_*gtd[i,j];
  g4u[i,j] := chi*gtu[i,j] - (1/Alpha^2)*Betau[i]*Betau[j];
od:
od:
for i from 0 to 3 do
for j from i+1 to 3 do
  g4d[j,i] := g4d[i,j];
  g4u[j,i] := g4u[i,j];
od:
od:
fortran(g4d,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(g4u,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(g4d,optimized,precision=double,filename=`constraints.h`):
fortran(g4u,optimized,precision=double,filename=`constraints.h`):
unassign('g4d'):
unassign('g4u'):
g4d := array(0..3,0..3):
g4u := array(0..3,0..3):
for i from 0 to 3 do
for j from i+1 to 3 do
  g4d[j,i] := g4d[i,j];
  g4u[j,i] := g4u[i,j];
od:
od:

# the four-dimensional d_phi, including the time component
d_phiR4d := array(0..3):
d_phiI4d := array(0..3):
d_phiR4u := array(0..3):
d_phiI4u := array(0..3):
d_phiR4d[0] := -Alpha*piR + add(Betau[i]*d_phiR[i],i=1..3):
d_phiI4d[0] := -Alpha*piI + add(Betau[i]*d_phiI[i],i=1..3):
for i from 1 to 3 do
  d_phiR4d[i] := d_phiR[i];
  d_phiI4d[i] := d_phiI[i];
od:

for i from 0 to 3 do
  d_phiR4u[i] := add(g4u[i,j]*d_phiR4d[j],j=0..3);
  d_phiI4u[i] := add(g4u[i,j]*d_phiI4d[j],j=0..3);
od:

fortran(d_phiR4d,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(d_phiR4u,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(d_phiI4d,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(d_phiI4u,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(d_phiR4d,optimized,precision=double,filename=`constraints.h`):
fortran(d_phiR4u,optimized,precision=double,filename=`constraints.h`):
fortran(d_phiI4d,optimized,precision=double,filename=`constraints.h`):
fortran(d_phiI4u,optimized,precision=double,filename=`constraints.h`):

unassign('d_phiR4d'):
unassign('d_phiR4u'):
unassign('d_phiI4d'):
unassign('d_phiI4u'):

d_phiR4d := array(0..3):
d_phiI4d := array(0..3):
d_phiR4u := array(0..3):
d_phiI4u := array(0..3):

# the term with the trace
dphiR4sq_ := add(d_phiR4u[i]*d_phiR4d[i],i=0..3): #For dilaton#
dphiI4sq_ := add(d_phiI4u[i]*d_phiI4d[i],i=0..3): #For axion#
fortran([dphiR4sq=dphiR4sq_],optimized,precision=double,filename=`bssn_emtest.h`):
fortran([dphiR4sq=dphiR4sq_],optimized,precision=double,filename=`constraints.h`):

fortran([dphiI4sq=dphiI4sq_],optimized,precision=double,filename=`bssn_emtest.h`):
fortran([dphiI4sq=dphiI4sq_],optimized,precision=double,filename=`constraints.h`):


# the term for cross term (e.g. dil*axn term) #
dphiIR4sq_ := add(d_phiI4u[i]*d_phiR4d[i],i=0..3): 
dphiRI4sq_ := add(d_phiR4u[i]*d_phiI4d[i],i=0..3): 

fortran([dphiIR4sq=dphiIR4sq_],optimized,precision=double,filename=`bssn_emtest.h`):
fortran([dphiIR4sq=dphiIR4sq_],optimized,precision=double,filename=`constraints.h`):

fortran([dphiRI4sq=dphiRI4sq_],optimized,precision=double,filename=`bssn_emtest.h`):
fortran([dphiRI4sq=dphiRI4sq_],optimized,precision=double,filename=`constraints.h`):


# a quadratic potential with a massive term
sfVR_     := dil_mass^2*phiR*phiR:
sfVI_     := axn_mass^2*phiI*phiI:   
dVdphiR2_ := dil_mass^2:
dVdphiI2_ := axn_mass^2:

fortran([sfVR=sfVR_,sfVI=sfVI_,dVdphiR2=dVdphiR2_,dVdphiI2=dVdphiI2_],optimized,precision=double,filename=`bssn_emtest.h`):
fortran([sfVR=sfVR_,sfVI=sfVI_,dVdphiR2=dVdphiR2_,dVdphiI2=dVdphiI2_],optimized,precision=double,filename=`constraints.h`):

Tsfu := array(0..3,0..3): #sf refers scalar field real part
for i from 0 to 3 do
for j from i to 3 do
  Tsfu[i,j] := d_phiR4u[i]*d_phiR4u[j] - half*g4u[i,j]*(dphiR4sq + sfVR)+fourth*exp(4*axn_alpha*phiR)*(d_phiI4u[i]*d_phiI4u[j] - half*g4u[i,j]*(dphiI4sq + sfVI));
od:
od:
for i from 0 to 3 do
for j from i+1 to 3 do
  Tsfu[j,i] := Tsfu[i,j]:
od:
od:

fortran(Tsfu,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(Tsfu,optimized,precision=double,filename=`constraints.h`):
unassign('Tsfu'):
Tsfu := array(0..3,0..3):
for i from 0 to 3 do
for j from i+1 to 3 do
  Tsfu[j,i] := Tsfu[i,j]:
od:
od:

#########################################################################################
#   S T R E S S - E N E R G Y   T E N S O R   F O R   E L E C T R O M A G N E T I S M   # 
#########################################################################################
emEu := array(1..3) :
emBu := array(1..3) :


LC_altsym4D := array(0..3,0..3,0..3,0..3) : #Levi-Civita symbol in 4D
LC_altsym := array(1..3,1..3,1..3) : #Levi-Civita symbol in 3D
 
for i from 1 to 3 do 
for j from 1 to 3 do 
for k from 1 to 3 do 
   LC_altsym[i,j,k] := 0 ; 
od;
od;
od;


for i from 0 to 3 do 
for j from 0 to 3 do 
for k from 0 to 3 do 
for l from 0 to 3 do
   LC_altsym4D[i,j,k,l] := 0 ; 
od;
od;
od;
od;

#Non zero elements in 3D Levi-Civita symbol#
LC_altsym[1,2,3] :=  1:  LC_altsym[2,3,1] :=  1:  LC_altsym[3,1,2] :=  1:  
LC_altsym[2,1,3] := -1:  LC_altsym[3,2,1] := -1:  LC_altsym[1,3,2] := -1: 

#Non zero elements in 4D Levi-Civita symbol#

LC_altsym4D[0,1,2,3] := 1: LC_altsym4D[0,1,3,2] := -1: LC_altsym4D[0,2,1,3] := -1: LC_altsym4D[0,2,3,1] := 1: 
LC_altsym4D[0,3,1,2] := 1: LC_altsym4D[0,3,2,1] := -1: LC_altsym4D[1,0,2,3] := -1: LC_altsym4D[1,0,3,2] := 1: 
LC_altsym4D[1,2,0,3] := 1: LC_altsym4D[1,2,3,0] := -1: LC_altsym4D[1,3,0,2] := -1: LC_altsym4D[1,3,2,0] := 1: 
LC_altsym4D[2,0,1,3] := 1: LC_altsym4D[2,0,3,1] := -1: LC_altsym4D[2,1,0,3] := -1: LC_altsym4D[2,1,3,0] := 1: 
LC_altsym4D[2,3,0,1] := 1: LC_altsym4D[2,3,1,0] := -1: LC_altsym4D[3,0,1,2] := -1: LC_altsym4D[3,0,2,1] := 1: 
LC_altsym4D[3,1,0,2] := 1: LC_altsym4D[3,1,2,0] := -1: LC_altsym4D[3,2,0,1] := -1: LC_altsym4D[3,2,1,0] := 1:


#Define Levi-Civita Tensor in 4D#

epsilon4Du := array(0..3,0..3,0..3,0..3):

for i from 0 to 3 do 
for j from 0 to 3 do 
for k from 0 to 3 do 
for l from 0 to 3 do
   epsilon4Du[i,j,k,l] := one/(Alpha*sqrt(chi^(-three)))*LC_altsym4D[i,j,k,l] ; 
od;
od;
od;
od;

Temu := array(0..3,0..3):
Femd := array(0..3,0..3):
Femud := array(0..3,0..3):
Femu := array(0..3,0..3):


# DEFINE DUAL OF MAXWELL TENSOR VARIABLE #
dualFemd := array(0..3,0..3):
dualFemud := array(0..3,0..3):
dualFemu := array(0..3,0..3):


# Initialization, HL : Do we need this? #
for i from 0 to 3 do
for j from 0 to 3 do
  Femd[i,j] := 0;
od:
od:

#---EWH (begin)---#
# Femd is antisymmetric 
#for i from 0 to 3 do
#  Femd[i,i] := 0.0;
#od:
#for i from   0 to 2 do
#for j from i+1 to 3 do
#  Femd[j,i] := - Femd[i,j] ;
#od:
#od:
#---EWH (end)-----#

# CP : 1/chi missing here!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
for i from 1 to 3 do
  Femd[0,i] := -Alpha * add(gtd[i,j]*emEu[j],j=1..3);
  Femd[i,0] := - Femd[0,i];
od: 
for i from 1 to 3 do
for j from i+1 to 3 do
  Femd[i,j] := inv_chi^(3/2)*add(LC_altsym[i,j,k]*emBu[k],k=1..3);
  Femd[j,i] := - Femd[i,j];
od:
od:
fortran(Femd,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(Femd,optimized,precision=double,filename=`constraints.h`):
unassign('Femd'):

unassign('emEu'):
unassign('emBu'):
unassign('LC_altsym'):

Femd := array(0..3,0..3):
for i from 0 to 3 do
for j from i+1 to 3 do
  Femd[j,i] := - Femd[i,j];
od:
od:

#---EWH (begin)---#
#for i from 0 to 3 do 
#  Femd[i,i] := 0.0; 
#od:
#for i from 0 to 2 do
#for j from i+1 to 3 do
#  Femd[j,i] := - Femd[i,j];
#od:
#od:
#---EWH (end)-----#

for i from 0 to 3 do
for j from 0 to 3 do
  Femud[i,j] := add(g4u[i,k]*Femd[k,j],k=0..3);
od:
od:
fortran(Femud,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(Femud,optimized,precision=double,filename=`constraints.h`):
unassign('Femud'):
Femud := array(0..3,0..3):

for i from 0 to 3 do
for j from i to 3 do
  Femu[i,j] := add(g4u[j,k]*Femud[i,k],k=0..3);
od:
od:
for i from 0 to 3 do
for j from i+1 to 3 do
  Femu[j,i] := -Femu[i,j];
od:
od:
fortran(Femu,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(Femu,optimized,precision=double,filename=`constraints.h`):
unassign('Femu'):
Femu := array(0..3,0..3):
for i from 0 to 3 do
for j from i+1 to 3 do
  Femu[j,i] := - Femu[i,j];
od:
od:

# Dual of Maxwell Tensor #

for i from 0 to 3 do
for j from i to 3 do
  dualFemu[i,j] := half*add(add(epsilon4Du[i,j,k,l]*Femd[k,l],k=0..3),l=0..3);
od:
od:
for i from 0 to 3 do
for j from i+1 to 3 do
  dualFemu[j,i] := -dualFemu[i,j];
od:
od:
fortran(dualFemu,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(dualFemu,optimized,precision=double,filename=`constraints.h`):


# the quadratic term
Fsq_ := add(add(Femu[k,m]*Femd[k,m],k=0..3),m=0..3):
fortran([Fsq=Fsq_],optimized,precision=double,filename=`bssn_emtest.h`):
fortran([Fsq=Fsq_],optimized,precision=double,filename=`constraints.h`):

for i from 0 to 3 do
for j from i to 3 do
  Temu[i,j] := add(Femud[i,k]*Femu[j,k],k=0..3) - fourth*g4u[i,j]*Fsq;
od:
od:
for i from 0 to 3 do
for j from i+1 to 3 do
  Temu[j,i] := Temu[i,j];
od:
od:

fortran(Temu,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(Temu,optimized,precision=double,filename=`constraints.h`):
unassign('Temu'):
Temu := array(0..3,0..3):
for i from 0 to 3 do
for j from i+1 to 3 do
  Temu[j,i] := Temu[i,j];
od:
od:


######################################################################################
#   S T R E S S - E N E R G Y   T E N S O R   F O R  DILATON - AXION 
######################################################################################

for i from 0 to 3 do
for j from 0 to 3 do
  Tu[i,j] := ( Tsfu[i,j] + two*exp(-two*dil_alpha*phiR)*Temu[i,j] )/(four_pi_G);
od:
od:

#---EWH (begin)---#
#for i from 0 to 3 do
#for j from i to 3 do
#  Tu[i,j] := Tsfu[i,j] + exp(-two*dil_alpha*phiR)*Temu[i,j])/(four_pi_G) ;
#od:
#od:
#---EWH (end)-----#


fortran(Tu,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(Tu,optimized,precision=double,filename=`constraints.h`):
unassign('Tu'):
Tu := array(0..3,0..3):
for i from 0 to 3 do
for j from i+1 to 3 do
  Tu[j,i] := Tu[i,j];
od:
od:

######################################################################################
##  Now include the elements of the stress-tensor in the 3+1 decomposition.  ## 
######################################################################################
Betatd := array(1..3) : 

rho_ADM_ := Alpha*Alpha * Tu[0,0] :

for i from 1 to 3 do 
  Jtd_ADM[i] := Alpha * add( ( Tu[0,j] + Betau[j] * Tu[0,0] ) * gtd[i,j] , j=1..3 ) :
  Betatd[i]  := add( Betau[j] * gtd[i,j] , j=1..3 ) :  
od:

for i from 1 to 3 do 
  pTtd_ADM[i,i] :=   Betatd[i] * Betatd[i] * Tu[0,0] 
                   + two * Betatd[i] * add( gtd[i,k] * Tu[0,k] , k=1..3 ) 
                   +            add( gtd[i,k] * gtd[i,k] * Tu[k,k] , k=1..3 ) 
                   + two * add( add( gtd[i,k] * gtd[i,m] * Tu[k,m] , m=k+1..3) , k=1..2 ) :
od:                     
                  
## for i from   1 to 2 do 
## for j from i+1 to 3 do 
##   pTtd_ADM[i,j] :=   Betatd[i] * Betatd[j] * Tu[0,0] 
##                    + Betatd[i] * add( gtd[j,k] * Tu[0,k] , k=1..3 ) 
##                    + Betatd[j] * add( gtd[i,k] * Tu[0,k] , k=1..3 ) 
##                    +             add( gtd[i,k] * gtd[j,k] * Tu[k,k] , k=1..3 ) 
##                    +  two * add( add( gtd[i,k] * gtd[j,m] * Tu[k,m] , m=k+1..3) , k=1..2 ) ;
## od;
## od;                     
                  
for i from   1 to 2 do 
for j from i+1 to 3 do 
  pTtd_ADM[i,j] :=   Betatd[i] * Betatd[j] * Tu[0,0] 

                   + Betatd[i] * add( gtd[j,k] * Tu[0,k] , k=1..3 ) 
                   + Betatd[j] * add( gtd[i,k] * Tu[0,k] , k=1..3 ) 

                   + add( add( gtd[i,k] * gtd[j,m] * Tu[k,m] , m=1..3) , k=1..3 ) ;
od;
od;                     
                                    

fortran([rho_ADM=rho_ADM_],optimized,precision=double,filename=`bssn.h`):
fortran(Jtd_ADM,optimized,precision=double,filename=`bssn.h`):
fortran(pTtd_ADM,optimized,precision=double,filename=`bssn.h`):
fortran([rho_ADM=rho_ADM_],optimized,precision=double,filename=`bssn_emtest.h`):
fortran(Jtd_ADM,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(pTtd_ADM,optimized,precision=double,filename=`bssn_emtest.h`):

fortran([rho_ADM=rho_ADM_],optimized,precision=double,filename=`constraints.h`):
fortran(Jtd_ADM,optimized,precision=double,filename=`constraints.h`):

unassign('Jtd_ADM') ; 
unassign('pTtd_ADM') ;
unassign('Betaud');
Jtd_ADM  := array(1..3) : 
Betaud   := array(1..3) :
pTtd_ADM := array(1..3,1..3) :

#---EWH (begin)---#
#for i from   1 to 3 do
#for j from i+1 to 3 do 
#  pTtd_ADM[j,i] := pTtd_ADM[i,j] :
#od:
#od:
#---EWH (end)-----# 
</Font></Text-field>
</Input>
</Group>
<Group hide-output="false" labelreference="L6" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">###  Calculate the auxiliary variables  ##

for i from 1 to 3 do 
for j from 1 to 3 do 
  Atud[i,j] := add( gtu[i,k] * Atd[k,j] , k=1..3 ) ; 
od;
od;

fortran(Atud,optimized,precision=double,filename=`bssn.h`);
fortran(Atud,optimized,precision=double,filename=`bssn_emtest.h`);
fortran(Atud,optimized,precision=double,filename=`psi4.h`);
fortran(Atud,optimized,precision=double,filename=`constraints.h`);
unassign('Atud');
Atud := array(1..3,1..3):

for i from 1 to 3 do 
for j from i to 3 do 
  Atu[i,j] := add( Atud[i,k] * gtu[k,j] , k=1..3 ) ;
od;
od; 

fortran(Atu,optimized,precision=double,filename=`bssn.h`);
fortran(Atu,optimized,precision=double,filename=`bssn_emtest.h`);
fortran(Atu,optimized,precision=double,filename=`constraints.h`);
unassign('Atu');
Atu := array(1..3,1..3):
for i from   1 to 3 do 
for j from i+1 to 3 do 
  Atu[j,i] := Atu[i,j] :
od:
od:


for i from 1 to 3 do 
for j from 1 to 3 do 
for k from j to 3 do 
  Ctd[i,j,k] := d_gtd[j,k,i] + d_gtd[k,j,i] - d_gtd[i,j,k] ; 
od;
od;
od;

fortran(Ctd,optimized,precision=double,filename=`bssn.h`);
fortran(Ctd,optimized,precision=double,filename=`bssn_emtest.h`);
fortran(Ctd,optimized,precision=double,filename=`psi4.h`);
fortran(Ctd,optimized,precision=double,filename=`constraints.h`);
unassign('Ctd');
Ctd := array(1..3,1..3,1..3):
for i from   1 to 3 do 
for j from   1 to 3 do 
for k from j+1 to 3 do 
  Ctd[i,k,j] := Ctd[i,j,k] :
od:
od:
od:

for i from 1 to 3 do 
for j from 1 to 3 do 
for k from j to 3 do 
  Ct[i,j,k] := add( gtu[i,m] * Ctd[m,j,k] , m=1..3) ; 
od;
od;
od;

fortran(Ct,optimized,precision=double,filename=`bssn.h`);
fortran(Ct,optimized,precision=double,filename=`bssn_emtest.h`);
fortran(Ct,optimized,precision=double,filename=`psi4.h`);
fortran(Ct,optimized,precision=double,filename=`constraints.h`);
unassign('Ct');
Ct := array(1..3,1..3,1..3):
for i from   1 to 3 do 
for j from   1 to 3 do 
for k from j+1 to 3 do 
  Ct[i,k,j] := Ct[i,j,k] :
od:
od:
od:

div_Beta_ := add( d_Betau[i,i] , i=1..3 ) :

fortran([div_Beta=div_Beta_],optimized,precision=double,filename=`bssn.h`);
fortran([div_Beta=div_Beta_],optimized,precision=double,filename=`bssn_emtest.h`);

for i from 1 to 3 do 
  d_div_Beta[i] := add( dd_Betau[i,j,j] , j=1..3 ) ;
od:

fortran(d_div_Beta,optimized,precision=double,filename=`bssn.h`);
fortran(d_div_Beta,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('d_div_Beta');
d_div_Beta := array(1..3):


for i from 1 to 3 do 
  CalGamt[i] :=   half * add( gtu[j,j] * Ct[i,j,j] , j=1..3) 
                +   add( add( gtu[j,k] * Ct[i,j,k] , k=j+1..3 ), j=1..2 ) ;
od:

fortran(CalGamt,optimized,precision=double,filename=`bssn.h`);
fortran(CalGamt,optimized,precision=double,filename=`bssn_emtest.h`);
fortran(CalGamt,optimized,precision=double,filename=`psi4.h`);
fortran(CalGamt,optimized,precision=double,filename=`constraints.h`);
unassign('CalGamt');
CalGamt := array(1..3):


##  A comment is in order here.  We calculate Rpd_1.  This is the &quot;phi&quot; part of the Ricci tensor without the term which multiplies   ##
##  the (tilded) metric. We do this because we eventually want the trace free part of some terms for the evolution equation for Atd.      ##
##  This includes the Ricci tensor.  However, because any terms proportional to the metric will not appear in the trace free part, we     ## 
##  don't need it for the EOM.  However, the full Ricci tensor is needed for other calculations such as Psi_4 and the constraints.  So    ## 
##  we do calculate Rpd.                                                                                                                  ## 
##  Also note that Rpd is actually the Ricci tensor *without* a factor of inv_chi.  We leave that off here because it cancels in taking   ## 
##  the trace free parts.  
for i from 1 to 3 do 
for j from i to 3 do 

  Rpd_1[i,j] :=     half * dd_chi[i,j] 
                  - fourth * (    d_chi[i] * d_chi[j] * inv_chi 
                                + add( Ct[k,i,j] * d_chi[k] , k=1..3 ) ) ;  

  Rpd[i,j] :=   Rpd_1[i,j] 
              - half * gtd[i,j] * (   add( CalGamt[k] * d_chi[k] , k=1..3 )) 
              + half * gtd[i,j] *add( add( gtu[k,m] * ( -3.0/2.0 * inv_chi* d_chi[k] * d_chi[m] + dd_chi[k,m] ) , k=1..3 ),m=1..3) :
                                   

  Rtd[i,j] :=   fourth * (   add( CalGamt[k] * ( Ctd[i,j,k] + Ctd[j,i,k] ) , k=1..3 ) 
                           + add( add( gtu[m,n] * add(   Ct[k,m,i] * Ctd[j,k,n] 
                                                       + Ct[k,m,j] * Ctd[i,k,n] 
                                                       + Ct[k,i,n] * Ctd[k,m,j] , k=1..3 ) , m=1..3 ) , n=1..3) 
                         )  

               - half*add(add( gtu[m,n] * dd_gtd[m,n,i,j] , m=1..3 ),n=1..3) 
               + half*add( gtd[k,i] * d_Gamt[j,k] + gtd[k,j] * d_Gamt[i,k] , k=1..3 ) :
                                        

od;
od;

fortran(Rpd_1,optimized,precision=double,filename=`bssn.h`);
fortran(Rpd_1,optimized,precision=double,filename=`bssn_emtest.h`);
fortran(Rpd,optimized,precision=double,filename=`psi4.h`);
fortran(Rpd,optimized,precision=double,filename=`constraints.h`);
fortran(Rtd,optimized,precision=double,filename=`bssn.h`);
fortran(Rtd,optimized,precision=double,filename=`bssn_emtest.h`);
fortran(Rtd,optimized,precision=double,filename=`psi4.h`);
fortran(Rtd,optimized,precision=double,filename=`constraints.h`);
unassign('Rpd_1');
unassign('Rpd');
unassign('Rtd');
Rpd_1 := array(1..3,1..3):
Rpd   := array(1..3,1..3):
Rtd   := array(1..3,1..3):
for i from   1 to 3 do 
for j from i+1 to 3 do 
  Rpd_1[j,i] := Rpd_1[i,j] :
  Rpd[j,i]   := Rpd[i,j] :
  Rtd[j,i]   := Rtd[i,j] :
od:
od:


for i from 1 to 3 do 

  Psi1[i,i] :=   chi * (   Alpha * Rtd[i,i] 
                         - dd_Alpha[i,i] 
                         + half * add( Ct[k,i,i] * d_Alpha[k] , k=1..3 )  
                       )

               - inv_chi * eight_pi_G * Alpha * pTtd_ADM[i,i] 

               + Alpha * Rpd_1[i,i] 

               - d_Alpha[i] * d_chi[i] ; 

od:

for i from   1 to 2 do 
for j from i+1 to 3 do 

  Psi1[i,j] :=   chi * (   Alpha * Rtd[i,j] 
                         - dd_Alpha[i,j] 
                         + half * add( Ct[k,i,j] * d_Alpha[k] , k=1..3 ) 
                       ) 

               - inv_chi * eight_pi_G * Alpha * pTtd_ADM[i,j] 

               + Alpha * Rpd_1[i,j] 

               - half * ( d_Alpha[i] * d_chi[j] + d_Alpha[j] * d_chi[i] ) ; 

od;
od;

fortran(Psi1,optimized,precision=double,filename=`bssn.h`);
fortran(Psi1,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('Psi1');
Psi1 := array(1..3,1..3):
for i from   1 to 3 do 
for j from i+1 to 3 do 
  Psi1[j,i] := Psi1[i,j] :
od:
od:


third_trPsi1_ := third * ( add( Psi1[i,i] * gtu[i,i] , i=1..3 ) + two * add( add( Psi1[i,j] * gtu[i,j] , j=i+1..3 ) , i=1..2 ) ) :

fortran([third_trPsi1=third_trPsi1_],optimized,precision=double,filename=`bssn.h`):
fortran([third_trPsi1=third_trPsi1_],optimized,precision=double,filename=`bssn_emtest.h`):


for i from 1 to 3 do 
for j from i to 3 do 
  Psi1TF[i,j] := Psi1[i,j] - third_trPsi1 * gtd[i,j] ; 
od;
od;

fortran(Psi1TF,optimized,precision=double,filename=`bssn.h`);
fortran(Psi1TF,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('Psi1TF');
Psi1 := array(1..3,1..3):
for i from   1 to 3 do 
for j from i+1 to 3 do 
  Psi1TF[j,i] := Psi1TF[i,j] :
od:
od:

</Font></Text-field>
</Input>
</Group>
<Group labelreference="L7" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">## Define the RHS of the evolution equations without the advective terms.  ##

for i from 1 to 3 do 
  gtd_rhs[i,i] := two * (   add( gtd[i,k] * d_Betau[i,k] , k=1..3 ) 
                          - (   third * gtd[i,i] * div_Beta 
                              + Alpha * Atd[i,i] 
                            )  
                        ) ;
od:
 
for i from   1 to 2 do 
for j from i+1 to 3 do 

  gtd_rhs[i,j] :=   add( gtd[i,k] * d_Betau[j,k] + gtd[j,k] * d_Betau[i,k] , k=1..3 ) 
                  - two * (   third * gtd[i,j] * div_Beta 
                            + Alpha * Atd[i,j] ) ; 

od;
od; 

fortran(gtd_rhs,optimized,precision=double,filename=`bssn.h`);
fortran(gtd_rhs,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('gtd_rhs');
gtd_rhs := array(1..3,1..3):
for i from   1 to 3 do 
for j from i+1 to 3 do 
  gtd_rhs[j,i] := gtd_rhs[i,j] :
od:
od:


for i from 1 to 3 do 

  Atd_rhs[i,i] :=   two * add( Atd[i,k] * ( d_Betau[i,k] - Alpha * Atud[k,i] ) , k=1..3 ) 
                  + Atd[i,i] * (   Alpha * trK 
                                 - twothirds * div_Beta ) 
                  + Psi1TF[i,i]    ;                  

od:

for i from   1 to 2 do 
for j from i+1 to 3 do  

  Atd_rhs[i,j] :=   add( Atd[i,k] * d_Betau[j,k] + Atd[j,k] * d_Betau[i,k] , k=1..3 ) 
                  + Atd[i,j] * (   Alpha * trK 
                                 - twothirds * div_Beta ) 
                  + Psi1TF[i,j] 
                  - two * Alpha * add( Atd[i,k] * Atud[k,j] , k=1..3 ) ; 

od; 
od;

fortran(Atd_rhs,optimized,precision=double,filename=`bssn.h`);
fortran(Atd_rhs,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('Atd_rhs');
Atd_rhs := array(1..3,1..3):
for i from   1 to 3 do 
for j from i+1 to 3 do 
  Atd_rhs[j,i] := Atd_rhs[i,j] :
od:
od:


for i from 1 to 3 do 
  Gamt_rhs[i] :=   twothirds * CalGamt[i] * div_Beta
                 - add( CalGamt[j] * d_Betau[j,i] , j=1..3 ) 
                 +            add( gtu[j,j] * dd_Betau[j,j,i] , j=1..3 ) 
                 + two * add( add( gtu[j,k] * dd_Betau[j,k,i] , k=j+1..3 ) , j=1..2 ) 
                 + third * add( gtu[i,j] * d_div_Beta[j] , j=1..3 ) 
                 + two * (   Alpha * (   half * add( Ct[i,j,j] * Atu[j,j] , j=1..3 )
                                       +   add( add( Ct[i,j,k] * Atu[j,k] , k=j+1..3 ) , j=1..3 )  
                                       - add(   gtu[i,j] * (   twothirds * d_trK[j] 
                                                             + eight_pi_G * inv_chi * Jtd_ADM[j]      ) , j=1..3 )
                                     )
                           + add( Atu[i,j] * ( - threehalves * Alpha * d_chi[j] * inv_chi
                                               - d_Alpha[j]              ) , j=1..3 ) 
                         )  ; 

od:

fortran(Gamt_rhs,optimized,precision=double,filename=`bssn.h`);
fortran(Gamt_rhs,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('Gamt_rhs');
Gamt_rhs := array(1..3):


for i from 1 to 3 do 
  Betau_rhs[i] := threefourths * ( lambda_f0 + lambda_f1 * Alpha ) * Bu[i] :
od:

fortran(Betau_rhs,optimized,precision=double,filename=`bssn.h`);
fortran(Betau_rhs,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('Betau_rhs');
Betau_rhs := array(1..3):


for i from 1 to 3 do 
  Bu_rhs[i] := Gamt_rhs[i] - Bu[i] * feta ; 
od:                                               

fortran(Bu_rhs,optimized,precision=double,filename=`bssn.h`);
fortran(Bu_rhs,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('Bu_rhs');
Bu_rhs := array(1..3):


Alpha_rhs_ := - two * ( lambda_f2 + lambda_f3 * Alpha ) * Alpha * ( trK - trK0 ) :

chi_rhs_ := - twothirds * chi * ( div_Beta - Alpha * trK ) :  


tr_pT_ :=   inv_chi * (              add( gtu[i,i] * pTtd_ADM[i,i] , i=1..3 ) 
                        + two * add( add( gtu[i,j] * pTtd_ADM[i,j] , j=i+1..3 ) , i=1..2 ) ) : 
trK_rhs_ :=   Alpha * (              add( Atd[i,i] * Atu[i,i] , i=1..3 ) 
                        + two * add( add( Atd[i,j] * Atu[i,j] , j=i+1..3 ) , i=1..2 ) 
                        + third * trK * trK 
                        + four_pi_G * ( rho_ADM + tr_pT ) 
                       )  
            - chi * (   add( add( gtu[i,j] * dd_Alpha[i,j] , j=1..3 ) , i=1..3 )      ### this could be a bit better optimized since both are symmetric ...
                           - add( CalGamt[i] * d_Alpha[i] , i=1..3 )
                         )  
            + half * add( add( gtu[i,j] * d_Alpha[i] * d_chi[j], j=1..3 ) , i=1..3 ) : 

fortran([Alpha_rhs=Alpha_rhs_,chi_rhs=chi_rhs_,tr_pT=tr_pT_,trK_rhs=trK_rhs_],optimized,precision=double,filename=`bssn.h`);
fortran([Alpha_rhs=Alpha_rhs_,chi_rhs=chi_rhs_,tr_pT=tr_pT_,trK_rhs=trK_rhs_],optimized,precision=double,filename=`bssn_emtest.h`);

</Font></Text-field>
</Input>
</Group>
<Group labelreference="L181" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">##  Add in the advective terms to the RHS.  ##

for i from 1 to 3 do 
  Gamt_rhs_xxx[i] := Gamt_rhs[i] + add( Betau[j] * adv_d_Gamt[j,i] , j=1..3 ) ; 
od:

for i from 1 to 3 do 
for j from i to 3 do 
  Atd_rhs_xxx[i,j] := Atd_rhs[i,j] + add( Betau[k] * adv_d_Atd[k,i,j] , k=1..3 ) ; 
od;
od;

for i from 1 to 3 do 
for j from i to 3 do 
  gtd_rhs_xxx[i,j] := gtd_rhs[i,j] + add( Betau[k] * adv_d_gtd[k,i,j] , k=1..3 ) ; 
od;
od;

fortran(Gamt_rhs_xxx,optimized,precision=double,filename=`bssn_adv.h`);
fortran(Gamt_rhs_xxx,optimized,precision=double,filename=`bssn_emtest_adv.h`);
fortran(Atd_rhs_xxx ,optimized,precision=double,filename=`bssn_adv.h`);
fortran(Atd_rhs_xxx ,optimized,precision=double,filename=`bssn_emtest_adv.h`);
fortran(gtd_rhs_xxx, optimized,precision=double,filename=`bssn_adv.h`);
fortran(gtd_rhs_xxx, optimized,precision=double,filename=`bssn_emtest_adv.h`);
unassign('Gamt_rhs_xxx');
unassign('Atd_rhs_xxx');
unassign('gtd_rhs_xxx');
Gamt_rhs := array(1..3):
Atd_rhs  := array(1..3,1..3):
gtd_rhs  := array(1..3,1..3):
for i from   1 to 3 do 
for j from i+1 to 3 do 
  Atd_rhs_xxx[j,i] := Atd_rhs_xxx[i,j] :
  gtd_rhs_xxx[j,i] := gtd_rhs_xxx[i,j] :
od:
od:

for i from 1 to 3 do 
  Betau_rhs_xxx[i] := Betau_rhs[i] + lambda_2 * add( Betau[k] * adv_d_Betau[k,i] , k=1..3 ) :
od: 

for i from 1 to 3 do 
  Bu_rhs_xxx[i] := Bu_rhs[i] + add( Betau[k] * (          lambda_3  * adv_d_Bu[k,i] 
                                                 + (1.0 - lambda_4) * adv_d_Gamt[k,i]    ) , k=1..3 ) :
od:

fortran(Betau_rhs_xxx,   optimized,precision=double,filename=`bssn_adv.h`);
fortran(Betau_rhs_xxx,   optimized,precision=double,filename=`bssn_emtest_adv.h`);
fortran(Bu_rhs_xxx ,optimized,precision=double,filename=`bssn_adv.h`);
fortran(Bu_rhs_xxx ,optimized,precision=double,filename=`bssn_emtest_adv.h`);
unassign('Betau_rhs_xxx');
unassign('Bu_rhs_xxx');


chi_rhs_xxx_ := chi_rhs + add( Betau[k] * adv_d_chi[k] , k=1..3 ) : 

trK_rhs_xxx_ := trK_rhs + add( Betau[k] * adv_d_trK[k] , k=1..3 ) :

Alpha_rhs_xxx_ := Alpha_rhs + lambda_1 * add( Betau[k] * adv_d_Alpha[k] , k=1..3 ) :

fortran([chi_rhs_xxx=chi_rhs_xxx_, trK_rhs_xxx=trK_rhs_xxx_, Alpha_rhs_xxx=Alpha_rhs_xxx_] ,optimized,precision=double,filename=`bssn_adv.h`);
fortran([chi_rhs_xxx=chi_rhs_xxx_, trK_rhs_xxx=trK_rhs_xxx_, Alpha_rhs_xxx=Alpha_rhs_xxx_] ,optimized,precision=double,filename=`bssn_emtest_adv.h`);



</Font></Text-field>
</Input>
</Group>
<Group labelreference="L182" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">##  Include the E&amp;M fields together with constraint damping.  ###

emEu := array(1..3) :
emBu := array(1..3) :
Ju := array(1..3) : 

# HL : Define down index. Need to check #
#emEd := array(1..3) :
#emBd := array(1..3) :
d_emEu := array(1..3,1..3) :
d_emBu := array(1..3,1..3) :

adv_d_emEu := array(1..3,1..3) :
adv_d_emBu := array(1..3,1..3) :

d_emPsi := array(1..3) :
d_emPhi := array(1..3) :

adv_d_emPsi := array(1..3) :
adv_d_emPhi := array(1..3) :

emEu_rhs := array(1..3) :
emBu_rhs := array(1..3) :

emEu_rhs_xxx := array(1..3) :
emBu_rhs_xxx := array(1..3) :


LC_altsym := array(1..3,1..3,1..3) :
 
for i from 1 to 3 do 
for j from 1 to 3 do 
for k from 1 to 3 do 
   LC_altsym[i,j,k] := 0 ; 
od;
od;
od;


LC_altsym[1,2,3] :=  1:  LC_altsym[2,3,1] :=  1:  LC_altsym[3,1,2] :=  1:  
LC_altsym[2,1,3] := -1:  LC_altsym[3,2,1] := -1:  LC_altsym[1,3,2] := -1: 


divE_ := add( d_emEu[i,i] , i=1..3 ) - threehalves * inv_chi * add( emEu[i] * d_chi[i] , i=1..3 ) : 
divB_ := add( d_emBu[i,i] , i=1..3 ) - threehalves * inv_chi * add( emBu[i] * d_chi[i] , i=1..3 ) : 

Bsq_ := add( emBu[i] * emBu[i] * gtd[i,i] , i=1..3 ) + two * add( add( emBu[i] * emBu[j] * gtd[i,j] , j=i+1..3 ) , i=1..2 ) : 
inv_Bsq_ := 1.0 / Bsq : 

sqrt_chi_ := sqrt( abs(chi) ) : 

fortran([divE=divE_, divB=divB_, Bsq=Bsq_, inv_Bsq=inv_Bsq_, sqrt_chi=sqrt_chi_],optimized,precision=double,filename=`bssn_emtest.h`);


# the current from the dilaton-axion
for i from 1 to 3 do 
   Ju[i] := two * dil_alpha * add( Femu[i,k]*d_phiR4d[k], k=0..3 ) - exp(two * dil_alpha * phiR) * add(dualFemu[i,k] * d_phiI4d[k], k=0..3); # definition of current includes negative sign like (-J^i)#
od: 

fortran(Ju,optimized,precision=double,filename=`bssn_emtest.h`);
unassign('Ju') ; 

# the electric charge from the dilaton-axion 

qE_ := - two * dil_alpha * Alpha * add( Femu[k,0]*d_phiR4d[k], k=0..3 ) + two * exp(two * axn_alpha * phiR) * Alpha * add(dualFemu[k,0]*d_phiI4d[k],k=0..3): 

fortran([qE=qE_],optimized,precision=double,filename=`bssn_emtest.h`);
</Font></Text-field>
</Input>
</Group>
<Group labelreference="L183" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">

for i from 1 to 3 do 

  emEu_rhs[i] := - add( emEu[j] * d_Betau[j,i] , j=1..3 ) 
                 + sqrt_chi * add( add( LC_altsym[i,j,k] * (   add( emBu[c] * gtd[c,k] , c=1..3 ) * ( d_Alpha[j] - Alpha * d_chi[j] * inv_chi ) 
                                                             + Alpha * add( d_emBu[j,c] * gtd[c,k] + emBu[c] * d_gtd[j,c,k] , c=1..3 ) ) , j=1..3 ) , k=1..3 ) 
                 + Alpha * (   trK * emEu[i] 
                             - chi * add( gtu[i,j] * d_emPsi[j] , j=1..3 ) 
                             - Ju[i]  ) ;


  emBu_rhs[i] := - add( emBu[j] * d_Betau[j,i] , j=1..3 ) 

                 - sqrt_chi * add( add( LC_altsym[i,j,k] * (    add( emEu[c] * gtd[c,k] , c=1..3 ) * ( d_Alpha[j] - Alpha * d_chi[j] * inv_chi ) 
                                                              + Alpha * add( d_emEu[j,c] * gtd[c,k] + emEu[c] * d_gtd[j,c,k] , c=1..3 ) ) , j=1..3 ) , k=1..3 ) 
                 + Alpha * (   trK * emBu[i] 
                             + chi * add( gtu[i,j] * d_emPhi[j] , j=1..3 ) ) :
 

od: 

# HERE : ERIC PLEASE CHECK THIS 
#emPsi_rhs_ :=   Alpha * ( divE - qE ) - kappa_1 * Alpha * emPsi :
#emPhi_rhs_ :=   Alpha * ( divB - kappa_2 * emPhi ) : 


#---EWH (begin)---#
# I believe this is correct ... 
emPsi_rhs_ :=   Alpha * ( qE - divE - kappa_1 * emPsi ) :
emPhi_rhs_ :=   Alpha * (      divB - kappa_2 * emPhi ) : 
#---EWH (end)-----#
fortran(emEu_rhs,optimized,precision=double,filename=`bssn_emtest.h`):
fortran(emBu_rhs,optimized,precision=double,filename=`bssn_emtest.h`):
fortran([emPsi_rhs=emPsi_rhs_, emPhi_rhs=emPhi_rhs_],optimized,precision=double,filename=`bssn_emtest.h`):
unassign('emEu_rhs') ;
unassign('emBu_rhs') ; </Font></Text-field>
</Input>
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" spaceabove="0" linebreak="space" rightmargin="0" linespacing="0.0" initial="0" firstindent="0" leftmargin="0" bulletsuffix="" alignment="left" bullet="none" spacebelow="0" pagebreak-before="false"></Text-field>
</Input>
</Group>
<Group labelreference="L184" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">for j from 1 to 3 do 

  emEu_rhs_xxx[j] := emEu_rhs[j] + add( Betau[i] * adv_d_emEu[i,j] , i=1..3 ) :
  emBu_rhs_xxx[j] := emBu_rhs[j] + add( Betau[i] * adv_d_emBu[i,j] , i=1..3 ) :

od:

 emPsi_rhs_xxx_ := emPsi_rhs + add( Betau[i] * adv_d_emPsi[i] , i=1..3 ) :

 emPhi_rhs_xxx_ := emPhi_rhs + add( Betau[i] * adv_d_emPhi[i] , i=1..3 ) :


fortran(emEu_rhs_xxx,optimized,precision=double,filename=`bssn_emtest_adv.h`);
fortran(emBu_rhs_xxx,optimized,precision=double,filename=`bssn_emtest_adv.h`);
fortran([emPsi_rhs_xxx=emPsi_rhs_xxx_, emPhi_rhs_xxx=emPhi_rhs_xxx_],optimized,precision=double,filename=`bssn_emtest_adv.h`);
unassign('emEu_rhs_xxx');
unassign('emBu_rhs_xxx');

</Font></Text-field>
</Input>
</Group>
<Group labelreference="L229" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">### DEFINE SCALAR FIELD ###

d_phiR := array(1..3):
d_phiI := array(1..3):
d_piR := array(1..3):
d_piI := array(1..3):
dd_phiR := array(1..3,1..3):
dd_phiI := array(1..3,1..3):

## Impose symmetry on symmetric quantities ## 
for i from   1 to 3 do 
for j from i+1 to 3 do 
  dd_phiR[j,i] := dd_phiR[i,j] ;
  dd_phiI[j,i] := dd_phiI[i,j] ; 
od:
od:

## Scalar field RHS
phiR_rhs_ := - Alpha*piR:
phiI_rhs_ := - Alpha*piI:

# adding the dilaton terms 
piR_rhs_ :=   Alpha * ( - chi * add(add(gtu[i,j]*dd_phiR[i,j],i=1..3),j=1..3) 
                        + chi * add(CalGamt[k]*d_phiR[k],k=1..3) 
                        + half * add(add(gtu[i,j]*d_phiR[i]*d_chi[j],i=1..3),j=1..3) 
                        + trK * piR 
                        + dVdphiR2 * phiR 
                        #+ dVdphiI2 * phiI # potential for axion do we need this???# 
                        - dil_alpha * exp(-two*dil_alpha*phiR)*Fsq 
                        + half * dil_alpha * exp(four*axn_alpha*phiR)*(dphiI4sq - piI*piI)
                      ) 
                    
            - chi * add(add(gtu[i,j]*d_Alpha[i]*d_phiR[j],i=1..3),j=1..3):

# adding the axion terms 
piI_rhs_ :=   Alpha * ( - chi * add(add(gtu[i,j]*dd_phiI[i,j],i=1..3),j=1..3) 
                        + chi * add(CalGamt[k]*d_phiI[k],k=1..3) 
                        + half * add(add(gtu[i,j]*d_phiI[i]*d_chi[j],i=1..3),j=1..3) 
                        + trK * piI 
                        + dVdphiR2 * phiR 
                        #+ dVdphiI2 * phiI # potential for axion do we need this???# 
                        + four * axn_alpha * dphiIR4sq + four * axn_alpha * piR * piI + 4 * exp(-four*axn_alpha*phiR)*add(add(emEu[i]*emBu[j]*gtd[i,j],i=1..3),j=1..3)*inv_chi
                      ) 
                    
            - chi * add(add(gtu[i,j]*d_Alpha[i]*d_phiI[j],i=1..3),j=1..3):


#---EWH (begin)---# 
#piR_rhs_ :=   Alpha * ( - chi * add(add(gtu[i,j]*dd_phiR[i,j],i=1..3),j=1..3) 
#                         + chi * add(CalGamt[k]*d_phiR[k],k=1..3) 
#                         + half * add(add(gtu[i,j]*d_phiR[i]*d_chi[j],i=1..3),j=1..3) 
#                         + trK * piR 
#                         + dVdphi2 * phiR 
#                         - half * dil_alpha * exp(-two*dil_alpha*phiR)*Fsq   ### I think there should be an extra factor of a half here.  
#                       ) 
#             - chi * add(add(gtu[i,j]*d_Alpha[i]*d_phiR[j],i=1..3),j=1..3):
#---EWH (end)-----# 
# this one is not being used yet, it will be for the other dilaton field #H
#piI_rhs_ := Alpha * ( -chi*add(add(gtu[i,j]*dd_phiI[i,j],i=1..3),j=1..3) #+ chi*add(CalGamt[k]*d_phiI[k],k=1..3) + 1/2*add(add(gtu[i,j]*d_phiI[i]#*d_chi[j],i=1..3),j=1..3) + trK*piI +
#dVdphi2*phiI) - chi*add(add(gtu[i,j]*d_Alpha[i]*d_phiI[j],i=1..3),j=1.#.3):

fortran([phiR_rhs=phiR_rhs_,phiI_rhs=phiI_rhs_],optimized,precision=double,filename=`bssn_emtest.h`);
fortran([piR_rhs=piR_rhs_,piI_rhs=piI_rhs_],optimized,precision=double,filename=`bssn_emtest.h`);

#unassign('phiR_rhs_'):
#unassign('phiR_rhs_'):


adv_d_phiR := array(1..3) :
adv_d_phiI := array(1..3) :
adv_d_piR := array(1..3):
adv_d_piI := array(1..3):

phiR_rhs_xxx_ := phiR_rhs + add( Betau[i] * adv_d_phiR[i] , i=1..3 ) :
phiI_rhs_xxx_ := phiI_rhs + add( Betau[i] * adv_d_phiI[i] , i=1..3 ) :

piR_rhs_xxx_ := piR_rhs + add( Betau[i] * adv_d_piR[i] , i=1..3 ) :
piI_rhs_xxx_ := piI_rhs + add( Betau[i] * adv_d_piI[i] , i=1..3 ) :

fortran([phiR_rhs_xxx=phiR_rhs_xxx_, phiI_rhs_xxx=phiI_rhs_xxx_, piR_rhs_xxx=piR_rhs_xxx_, piI_rhs_xxx=piI_rhs_xxx_],optimized,precision=double,filename=`bssn_emtest_adv.h`):

</Font></Text-field>
</Input>
</Group>
<Group labelreference="L185" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">##  We now calculate the Weyl scalar, Psi_4.  ## 

m_np_real := array(1..3) : 
m_np_imag := array(1..3) : 
r_np      := array(1..3) : 

for i from 1 to 3 do 
for j from i to 3 do 
   MM[i,j] := m_np_real[i]*m_np_real[j] - m_np_imag[i]*m_np_imag[j] :
   NN[i,j] := m_np_real[i]*m_np_imag[j] + m_np_real[j]*m_np_imag[i] : 
od:
od:

for i from   1 to 3 do 
for j from i+1 to 3 do 
   MM[j,i] := MM[i,j] :
   NN[j,i] := NN[i,j] :
od:
od:

for i from   1 to 2 do 
for j from i+1 to 3 do 
   MR[i,j] := m_np_real[i]*r_np[j] - m_np_real[j]*r_np[i] :
   NR[i,j] := m_np_imag[i]*r_np[j] - m_np_imag[j]*r_np[i] :
od:
od:

for i from 1 to 3 do 
   MR[i,i] := 0 :
   NR[i,i] := 0 : 

   A_vec[i] := add( Atd[j,i]*r_np[j] , j=1..3 ) :
od:

for i from 1 to 2 do 
for j from i+1 to 3 do 
   MR[j,i] := - MR[i,j] :
   NR[j,i] := - NR[i,j] :
od:
od:

for a from 1 to 3 do 
for b from 1 to 3 do 
   Uu[a,b] := add( m_np_real[c] * ( d_Atd[b,c,a] + half * add( Ctd[i,c,a] * Atud[i,b] , i=1..3 ) ) , c=1..3 ) :
   Vv[a,b] := add( m_np_imag[c] * ( d_Atd[b,c,a] + half * add( Ctd[i,c,a] * Atud[i,b] , i=1..3 ) ) , c=1..3 ) :
od:
od:

r_d_chi := add( r_np[i] * d_chi[i] , i=1..3 ) :

A_temp := inv_chi * inv_chi * ( add( A_vec[i] * r_np[i] , i=1..3 ) + third * trK * chi + half * r_d_chi ) :

m_real_d_chi := add( m_np_real[i] * d_chi[i] , i=1..3) : 
m_imag_d_chi := add( m_np_imag[i] * d_chi[i] , i=1..3) : 

m_real_A_vec := add( m_np_real[i] *  A_vec[i] , i=1..3) : 
m_imag_A_vec := add( m_np_imag[i] *  A_vec[i] , i=1..3) : 




psi4_1_real :=           add( ( inv_chi * Rpd[i,i] + Rtd[i,i]) * MM[i,i] , i=1..3 ) 
               + two*add(add( ( inv_chi * Rpd[i,j] + Rtd[i,j]) * MM[i,j] , j=i+1..3 ) , i=1..2 ) :

psi4_1_imag :=           add( ( inv_chi * Rpd[i,i] + Rtd[i,i]) * NN[i,i] , i=1..3 ) 
               + two*add(add( ( inv_chi * Rpd[i,j] + Rtd[i,j]) * NN[i,j] , j=i+1..3 ) , i=1..2 ) :


psi4_2_real :=  A_temp * (       add(    Atd[i,i] * MM[i,i] , i=1..3 ) 
                           + two*add(add(Atd[i,j] * MM[i,j] , j=i+1..3) , i=1..2 ) ) : 


psi4_2_imag :=  A_temp * (       add(    Atd[i,i] * NN[i,i] , i=1..3 ) 
                           + two*add(add(Atd[i,j] * NN[i,j] , j=i+1..3) , i=1..2 ) ) : 


psi4_3_real :=  inv_chi * add( add( MR[a,b]* Uu[a,b] - NR[a,b]*Vv[a,b] , a=1..3) , b=1..3 ) : 
psi4_3_imag :=  inv_chi * add( add( NR[a,b]* Uu[a,b] + MR[a,b]*Vv[a,b] , a=1..3) , b=1..3 ) : 


psi4_4_real := inv_chi * inv_chi * (   m_real_A_vec * ( m_real_A_vec + half * m_real_d_chi )  
                                     - m_imag_A_vec * ( m_imag_A_vec + half * m_imag_d_chi )  ) : 
psi4_4_imag := inv_chi * inv_chi * (   m_real_A_vec * ( m_imag_A_vec - half * m_imag_d_chi ) 
                                     + m_imag_A_vec * ( m_real_A_vec - half * m_real_d_chi )  ) : 

psi4_real_ :=   psi4_1_real 
              + psi4_2_real 
              - psi4_3_real 
              - psi4_4_real :

psi4_imag_ := - (   psi4_1_imag 
                  + psi4_2_imag 
                  - psi4_3_imag 
                  - psi4_4_imag )  :


</Font></Text-field>
</Input>
</Group>
<Group labelreference="L186" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">fortran([psi4_real=psi4_real_ , psi4_imag=psi4_imag_],precision=double,optimized,filename=`psi4.h`);
</Font></Text-field>
</Input>
</Group>
<Group labelreference="L187" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">##  Include the constraints  ## 

HamCon_ :=  -sixteen_pi_G * rho_ADM
           + add(add( (Rpd[i,j] + chi * Rtd[i,j]) * gtu[i,j] , i=1..3),j=1..3) 
           - add(add( Atd[i,j] * Atu[i,j] , i=1..3),j=1..3)         
           + twothirds*trK^2 :


           
MomCon    := array(1..3) :

for i from 1 to 3 do

   MomCon[i] :=   add(add( gtu[j,k] * ( d_Atd[k,j,i] - half * add( Ct[m,k,i]*Atd[m,j] , m=1..3 ) ) , j=1..3 ) , k=1..3)  
                - add( Gamt[j] * Atd[i,j] , j=1..3) 
                - threehalves * add( Atud[j,i] * d_chi[j] , j=1..3 ) * inv_chi
                - twothirds*d_trK[i] 
                - eight_pi_G * Jtd_ADM[i] * inv_chi :
   

od:


</Font></Text-field>
</Input>
</Group>
<Group labelreference="L213" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">Rscalar_ := add(add((Rpd[i,j] + chi*Rtd[i,j]) * gtu[i,j] , i=1..3),j=1..3):</Font></Text-field>
</Input>
</Group>
<Group labelreference="L188" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">fortran([HamCon=HamCon_],optimized,precision=double,filename=`constraints.h`);
fortran(MomCon,optimized,precision=double,filename=`constraints.h`);
</Font></Text-field>
</Input>
</Group>
<Group labelreference="L214" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">fortran([Rscalar=Rscalar_],optimized,precision=double,filename=`constraints.h`);</Font></Text-field>
</Input>
</Group>
<Group labelreference="L189" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">##  There are some &quot;BSSN&quot; constraints that we should also consider.  ##

   gamt_con := array(1..3) :
calgamt_con := array(1..3) :

trA_ := add( Atud[i,i] , i=1..3 ) :

detgtm1_ := detgtd - 1.0 : 

for i from 1 to 3 do 

    gamt_con[i] := add( gtd[i,j] *    Gamt[j] , j=1..3 ) - add( add( gtu[j,k] * d_gtd[j,k,i] , j=1..3 ) , k=1..3 ) :

  calgamt_con[i] := add( gtd[i,j] * CalGamt[j] , j=1..3 ) - add( add( gtu[j,k] * d_gtd[j,k,i] , j=1..3 ) , k=1..3 ) :

od: 

</Font></Text-field>
</Input>
</Group>
<Group labelreference="L190" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"><Font size="14">fortran([trA = trA_, detgtm1 = detgtm1_], optimized,precision=double,filename=`constraints.h`) ; 
fortran(gamt_con, optimized,precision=double, filename=`constraints.h`) ; 
fortran(calgamt_con, optimized,precision=double, filename=`constraints.h`) ; 
</Font></Text-field>
</Input>
</Group>
<Group labelreference="L191" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" size="14" layout="Normal"></Text-field>
</Input>
</Group>
</Worksheet>